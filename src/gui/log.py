'''
The log window of the GUI. This presents the debugging messages generated by NOX

@author Kyriakos Zarifis
'''

from PyQt4 import QtGui, QtCore
from sqlite3 import *
from communication import LoggerInterface, LogHandler
import Popup
import threading


class logFilter():
    '''
    Definition of a log filter
    '''
    def __init__(self, tss, comps, verbs):
        self.timestamps = tss
        self.components = comps
        self.verbosities = verbs
                
        
class FilterWidget(QtGui.QWidget):
    '''
    The filter widget used to set log display filter
    '''
    def __init__(self, parent=None):
        self.parent = parent
        QtGui.QWidget.__init__(self, parent)
        
        # Configure Widget
        self.tsEdit = QtGui.QLineEdit()
        self.compEdit = QtGui.QLineEdit()
        self.verbEdit = QtGui.QLineEdit()
   
        timestampBtn = QtGui.QPushButton('&Timestamp')
        componentBtn = QtGui.QPushButton('&Component')
        verbosityBtn = QtGui.QPushButton('&Verbosity')
        clearBtn = QtGui.QPushButton("Clear filter")
        filterBtn = QtGui.QPushButton("Filter !")
        
        self.myVerbComboBox = Popup.VerbComboBox(self)
        
        self.connect(timestampBtn, QtCore.SIGNAL('clicked()'),
                    self.select_ts_menu)
        self.connect(componentBtn, QtCore.SIGNAL('clicked()'),
                    self.select_comp_menu)
        self.connect(verbosityBtn, QtCore.SIGNAL('clicked()'),
                    self.select_verb_menu)
        self.connect(clearBtn, QtCore.SIGNAL('clicked()'), self.clear)
        self.connect(filterBtn, QtCore.SIGNAL('clicked()'), self._filter)

        grid = QtGui.QGridLayout()
        grid.setSpacing(1)

        grid.addWidget(timestampBtn, 1, 0)
        grid.addWidget(componentBtn, 1, 1)
        grid.addWidget(verbosityBtn, 1, 2)
        grid.addWidget(clearBtn, 1, 3)
        grid.addWidget(self.tsEdit, 2, 0)
        grid.addWidget(self.compEdit, 2, 1)
        grid.addWidget(self.verbEdit, 2, 2)
        grid.addWidget(filterBtn, 2, 3)
        
        self.setLayout(grid)
        
        self.compFilt = []
        self.verbFilt = []
        
    def _filter(self):
        if not self.tsEdit.text():
            tss = None
        else:
            tss = str(self.tsEdit.text()).replace('-',' ').split(' ')
        if not self.compEdit.text():
            comps = None
        else:
            comps = str(self.compEdit.text()).replace(',','').split(' ')
        if not self.verbEdit.text():
            verbs = None
        else:
            verbs = str(self.verbEdit.text()).replace(',','').split(' ')
        self.compFilt = str(self.compEdit.text()).split()
        self.verbFilt = str(self.verbEdit.text()).split()
        f = logFilter(tss, comps, verbs)
        self.parent.show_filtered(f)
        
    def clear(self):
        self.tsEdit.setText('')
        self.compEdit.setText('')
        self.verbEdit.setText('')
        self._filter()
            
    def select_ts_menu(self):
        popup = Popup.TsComboBox(self)
        popup.exec_()
        
    def select_comp_menu(self):
        popup = Popup.CompComboBox(self)
        popup.exec_()
        
    def select_verb_menu(self):
        self.myVerbComboBox.exec_()
        
    def keyPressEvent(self, event):
        key = event.key()
        if key == QtCore.Qt.Key_Enter:
            self._filter()


class LogDisplay(QtGui.QTextEdit):
    '''
    The panel ised to display filtered log messages    
    '''
    def __init__(self, parent=None):
        QtGui.QTextEdit.__init__(self, parent)
        
        # Configure Widget
        self.parent = parent
        
        # Colors
        self.bgColor = QtCore.Qt.black
        self.textColor = QtGui.QColor(QtCore.Qt.green).light(85)
        
        self.p = QtGui.QPalette()
        self.setColors()
        
        self.setReadOnly(True)
        self.setText("Ready.\n")
        
    def setColors(self):
        self.p.setColor(QtGui.QPalette.Active, QtGui.QPalette.Base, self.bgColor)
        self.p.setColor(QtGui.QPalette.Inactive, QtGui.QPalette.Base, self.bgColor)
        self.setPalette(self.p)
        self.setTextColor(self.textColor)
    
    def append_message(self, msg):
        '''
        Appends message to the current widget's output 
        '''
        self.moveCursor(QtGui.QTextCursor.End)
        # looks like TextColor is reset with filter()  (???  check and fix, or
        # at least find where reset occurs and re-setcolor(green) there instead)
        self.setTextColor(self.textColor)
        self.textCursor().insertText(msg)
        
                    
class LogWidget(QtGui.QWidget):
    '''
    The left panel of the GUI, which holds a logDisplay and a filterWidget
    '''    
    trigger = QtCore.pyqtSignal(str)
    
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
                
        #self.parent = parent
        
        # Configure log message DB
        self.conn = connect('log.db')
        self.curs = self.conn.cursor()        
        # Delete previous messages table
        self.curs.execute('''DROP TABLE IF EXISTS messages''')
        # Create messages table
        self.curs.execute('''CREATE TABLE messages
          (timestamp TEXT PRIMARY KEY, component TEXT,
                verbosity TEXT, message TEXT)''')     
                
        self.logDisplay = LogDisplay(self)
        self.filterWidget = FilterWidget(self)
  
        vbox = QtGui.QVBoxLayout()
        vbox.addWidget(self.logDisplay)
        vbox.addWidget(self.filterWidget)

        self.setLayout(vbox)
        self.resize(300, 150)
               
        self.logInterface = LoggerInterface(self)
        self.logInterface.start()
        
        # Connect the trigger signal to a slot.
        self.trigger[str].connect(self.handle_trigger)
        
        # if set, new logs are not appended (used to give 
        # display access to other entities
        self.freezeLog = False
                
    def handle_trigger(self, msg):
        # Insert message to log db
        self.insert_message(msg)
        
	def __del__(self):
	    print "out"
	    self.wait()
	    #self.logInterface.stop()
                
    def insert_message(self, message):
        '''
        Inserts a new log message into the log message database. Called when
        new log message is received from nox's vlogger
        '''
        ts, verb, comp, msg = self.parse_logmsg(message)
        insert = "INSERT INTO messages VALUES (\'"+ts+"\', \'"+comp+"\', \'"+verb+"\', \'"+msg+"\')"
        self.curs.execute(insert)
        
        # Update DB
        #self.conn.commit()
        
        # Also if new message matches current filter, append to log display
        if not self.freezeLog:
            if (comp in self.filterWidget.compFilt       \
                    or not self.filterWidget.compFilt ) \
                and (verb in self.filterWidget.verbFilt   \
                    or not self.filterWidget.verbFilt ):
                self.logDisplay.append_message(ts+" | "+comp+" | "+verb+" | "+msg)      

    def parse_logmsg(self, m):
        '''
        Parses a log message string. Expected in standard format
        (timestamp|component|verbosity:message)
        '''
        msg = str(m)
        # msg = msg.replace("\"", "\\\"").replace("\'", "\\\'")
        # Strip 's and "s.
        msg = msg.replace("\"", "").replace("\'", "")
        split = msg.rsplit("|")
        timestamp = split[0]
        component = split[1]
        ver_mes = split[2]
        delim = ver_mes.index(':')
        verbosity = ver_mes[0:delim]
        message = ver_mes[delim+1:len(ver_mes)]
        
        return timestamp, verbosity, component, message

    def show_filtered(self, logfilter):
        ''' 
        Displayes log message output filtered by given filter
        '''
        # unfreeze logDisplay, if freezed
        self.freezeLog = False
        
        # Form SELECT
        select = "select * from messages WHERE 1=1 "  #stupid.change.
        if logfilter.timestamps:
            select = select + "AND ("
            select = select + "timestamp > \'"+logfilter.timestamps[0]+"\' AND "
            select = select + "timestamp < \'"+logfilter.timestamps[1]+"\'"
            select = select + ") "
            self.freezeLog = True
        if logfilter.components:
            select = select + "AND ("
            for comp in logfilter.components:
                select = select + "component=\'"+comp+"\' OR "
            select = select[0:len(select)-3]
            select = select + ")"
        if logfilter.verbosities:
            select = select + "AND ("
            for verb in logfilter.verbosities:
                select = select + "verbosity=\'"+verb+"\' OR "
            select = select[0:len(select)-3]
            select = select + ")"
        
        # Execute DB select
        self.curs.execute(select)
        
        # Display selection
        self.logDisplay.clear()
        for row in self.curs:
            self.logDisplay.append_message(row[0]+" | "+row[1]+" | "+row[2]+" | "+row[3]) 
            
