The functionality of the dhcp module is split between 2 modules : Hoemwork and dhcp. 

Homework is used in order to provide easy and rapid development of web service for nox. The implementation is in python. It currently keeps track of the state regarding the mac leayer access list and export some state regarding the mapping of the system. 

Dhcp module implements primaliry the functionality of switching and routing. It has only a set of handler for events in the system. Firstly, there is a set of handler for switches connection adn disconnection events. This is usefull to keep a list of all the availiabvle datapath. The module also implements a set of packet in event handler. dhcp_pkt_in_event handle allows to handle dhcp request traffic. The method simply checks allowable mac address and assigns an ip appropriately. The system exploits the lease time parameter of the protocol and forces non allowed mac addresses to cehck frequently with the system to see if their mac is elligible to get a routable ip. The module also has a method that handles arp traffic. This at the current point for each packet, installs a direct communication channel with the bridge for each request. In future relesase, I am planning to extend this code and reply as the router. Finall, the last pakcet in handler, handles all ip traffic. This method basically installs apths between br0 and the wlan interfaces. The method implements a basic set of checks. I guess in the future this method with contain alot of the security functionality required by the module. It's sdevelopment is still open to improvement. Also I have an idea to allow faster switching between internal hosts. Since we have a switch implementation, we can allow reach packet to be handled by the switching module of the openvswitch. The rule though will have to insert rules that translate the MAC addresses as well. Apart from the packet handling code, the module contains also a time event handler wich basically refresses the rule that route dhcp traffic to the controller. 
The module keeps a state for each ip-mac assignment. This assignment has a set of indexed pointer, for easy search. The module provides a couple of methods that allow easy insertion and removal of state. The methods take care to insert remove/remove state on the appropriate structures and force network stack to reply to specific ip addresses. 
FInally the module has a couple of functions that allow bidirectional communication with the python code. In order to do that I developed a simple proxy between the two using swing. The proxy simply exports relevant methods, without having ny processing to the calls, and doing only simple marshalling/unmarsalling of the data. The interaction points between the two module is a set of methods from Python that allow checking of the ACL for a specific mac address and 
